plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5' // Stable, modern version
	id 'io.spring.dependency-management' version '1.1.5' // Compatible with Spring Boot 3.2.x
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	// Use sourceCompatibility for simplicity and consistency
	sourceCompatibility = '21'
}

repositories {
	mavenCentral()
}

// This BOM is the single source of truth for all Spring Cloud AWS dependency versions.
// Use the correct version for Spring Boot 3.x
dependencyManagement {
	imports {
		mavenBom "io.awspring.cloud:spring-cloud-aws-dependencies:2.4.4"
	}
}

dependencies {
	// --- Spring Boot Starters ---
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-logging'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// --- JWT ---
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// --- Database ---
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

	// --- Lombok ---
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	// Elasticsearch 의존성 추가
	implementation("org.springframework.boot:spring-boot-starter-data-elasticsearch:2.7.18")
	runtimeOnly 'me.paulschwarz:spring-dotenv:4.0.0'

	// OpenSearch
	implementation 'org.opensearch.client:opensearch-rest-high-level-client:2.19.0'
	implementation("org.opensearch.client:opensearch-java:2.7.0") // 최신 OpenSearch Client

	// --- Kafka ---
	implementation 'org.springframework.kafka:spring-kafka'
	testImplementation 'org.springframework.kafka:spring-kafka-test'

	// --- AWS ---
	// No explicit version here! This removes the critical version conflict.
	// The error "Could not find ...-config:." is caused by a trailing colon. Ensure it is removed.
	implementation 'io.awspring.cloud:spring-cloud-starter-aws-secrets-manager-config:2.4.4'

	// --- Testing ---
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

// This block is crucial for creating a runnable JAR and resolving the "Unable to find a single main class" error.
springBoot {
	mainClass = 'com.example.finalproject.BackendApplication'
}
