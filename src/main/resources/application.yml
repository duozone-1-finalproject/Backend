server:
  port: 8080

spring:
  config:
    import: "optional:file:.env[.properties]"
  mvc:
    async:
      request-timeout: 6200000   # 3분 (ms)
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}  # .env에서 덮어쓰기 가능 (기본 dev)
  datasource:
    url: jdbc:mariadb://${DB_HOST}:${DB_PORT}/${DB_NAME}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.mariadb.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true
    dialect: org.hibernate.dialect.MariaDBDialect
    open-in-view: false

  opensearch:
    uris: ${OPENSEARCH_URIS}
    connection-timeout: 5s     # connect timeout
    socket-timeout: 60s        # read timeout
    max-conn-total: 100
    max-conn-per-route: 100
    sniff-enabled: false

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: all
      retries: 3
    consumer:
      # 다른 Java AI 서버용 group-id
      group-id: ${KAFKA_CONSUMER_GROUP:ai-backend-group}
      # FastAPI 연동 전용 group-id
      fastapi-group-id: ${KAFKA_FASTAPI_CONSUMER_GROUP:fastapi-backend-group}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      auto-offset-reset: earliest
      enable-auto-commit: true

  security:
    user:
      name: disabled
      password: disabled
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: [ email, profile ]
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope: [ name, email, profile_image ]
            client-name: Naver
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope: [ profile_nickname, account_email, profile_image ]
            client-name: Kakao
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

# FastAPI 관련 설정 그룹
fastapi:
  urls: ${FastAPI_URL}
  kafka:
    timeout:
      seconds: ${FASTAPI_KAFKA_TIMEOUT:600} # 타임아웃 120초

jwt:
  secret: ${JWT_SECRET}
  expiration: ${JWT_EXPIRATION}
  refresh-expiration: ${JWT_REFRESH_EXPIRATION}

dart:
  api:
    key: ${DART_API_KEY}
    obj: ${DART_API_OBJ_KEY}
    ljh: ${DART_API_LJH_KEY}
    base-url: https://opendart.fss.or.kr/api

frontend:
  url: ${FRONTEND_URL}

kafka:
  topics:
    ai-request: ${KAFKA_TOPIC_AI_REQUEST:ai-report-request}
    ai-response: ${KAFKA_TOPIC_AI_RESPONSE:ai-report-response}
    fastapi-request: ${KAFKA_TOPIC_FASTAPI_REQUEST:fastapi-equity-request}
    fastapi-response: ${KAFKA_TOPIC_FASTAPI_RESPONSE:fastapi-equity-response}
    validation-request: ${KAFKA_TOPIC_VALIDATION_REQUEST:ai-validation-request}
    validation-response: ${KAFKA_TOPIC_VALIDATION_RESPONSE:ai-validation-response}
    revision-request: ${KAFKA_TOPIC_REVISION_REQUEST:ai-revision-request}
    revision-response: ${KAFKA_TOPIC_REVISION_RESPONSE:ai-revision-response}

# ===== OpenSearch 인덱스 설정 =====
opensearch:
  indices:
    report: ${OPENSEARCH_INDEX_REPORT:ai-generated-reports}
    company: ${OPENSEARCH_INDEX_COMPANY:company-data}

logging:
  level:
    root: ${LOG_LEVEL:INFO}
    org.springframework.security: ${SECURITY_LOG_LEVEL:DEBUG}
    org.springframework.boot.autoconfigure.security: ${SECURITY_LOG_LEVEL:DEBUG}
    org.springframework.data.opensearch: ${OPENSEARCH_LOG_LEVEL:DEBUG}
    com.example.finalproject: ${APP_LOG_LEVEL:DEBUG}
    # org.springframework.data.elasticsearch: DEBUG
    # org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: DEBUG  # (매핑 확인시 켜기)

# ===== AI 시스템 설정 (기본값: 실서버 사용) =====
ai:
  system:
    enabled: ${AI_SYSTEM_ENABLED:true}   # 실제 AI 서버 사용 여부
  mock:
    enabled: ${AI_MOCK_ENABLED:false}    # Mock 사용 여부(기본 false)
  timeout:
    seconds: ${AI_TIMEOUT_SECONDS:600}    # AI 응답 대기 시간(초)

# ===== dev 프로필 =====
---
spring:
  config:
    activate:
      on-profile: dev

# dev에서도 실AI 연동 테스트가 가능하도록 mock 비활성 & 적당한 타임아웃
ai:
  mock:
    enabled: false
  timeout:
    seconds: 600

# ===== prod 프로필 =====
---
spring:
  config:
    activate:
      on-profile: prod

ai:
  mock:
    enabled: false
  timeout:
    seconds: 600

management:
  endpoints:
    web:
      exposure:
        include: health # 'health' 엔드포인트를 HTTP로 노출
  endpoint:
    health:
      show-details: when_authorized # 인증된 사용자에게만 상세 정보 표시
