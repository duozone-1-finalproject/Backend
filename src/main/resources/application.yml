server:
  port: 8080

spring:
  config:
    import:
      - "optional:aws-secretsmanager:app/finalproject"
      - "optional:aws-secretsmanager:rds/finalproject"
  cloud:
    aws:
      secrets-manager:
        enabled: true
        region: ap-northeast-2

  datasource:
    url: jdbc:mariadb://${db.host}:${db.port}/${db.name}
    username: ${db.username}         # Secrets Manager에서 가져옴
    password: ${db.password}         # Secrets Manager에서 가져옴
    driver-class-name: org.mariadb.jdbc.Driver

  jpa:
    # database-platform is auto-detected by Hibernate from the driver.
    hibernate:
      ddl-auto: update
      show-sql: true

  jwt:
    secret-key: ${JWT_SECRET_KEY}   # Secrets Manager 혹은 환경변수에서 가져올 값
    expiration: ${JWT_EXPIRATION}   # Secrets Manager 값

  dart:
    api:
      key: ${DART_API_KEY}
      key-obj: ${DART_API_KEY_OBJ}     # Secrets Manager에서 가져오기
      key-ljh: ${DART_API_KEY_LJH}     # Secrets Manager에서 가져오기
      base-url: ${DART_API_BASE_URL}

  security:
    # [Clarity] Use the standard property to disable the default basic authentication login prompt.
    basic:
      enabled: false
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: [ email, profile ]
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope: [ name, email, profile_image ]
            client-name: Naver
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope: [ profile_nickname, account_email, profile_image ]
            client-name: Kakao
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: all
      retries: 3
    consumer:
      group-id: ${KAFKA_CONSUMER_GROUP:ai-backend-group}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      auto-offset-reset: earliest
      enable-auto-commit: true

  opensearch:
    uris: ${OPENSEARCH_URI}
    username: ${OPENSEARCH_USERNAME:admin}
    password: ${OPENSEARCH_PASSWORD:admin}
    connection-timeout: 5s     # connect timeout
    socket-timeout: 60s        # read timeout
    max-conn-total: 100
    max-conn-per-route: 100
    sniff-enabled: false

  frontend:
    url: ${spring.frontend.uris}



# ===== AI 시스템 설정 (기본값: 실서버 사용) =====
ai:
  system:
    enabled: ${AI_SYSTEM_ENABLED:true}   # 실제 AI 서버 사용 여부
  mock:
    enabled: ${AI_MOCK_ENABLED:false}    # Mock 사용 여부(기본 false)
  timeout:
    seconds: ${AI_TIMEOUT_SECONDS:60}    # AI 응답 대기 시간(초)

# ===== FastAPI 연동 설정 =====
fastapi:
  urls: ${FastAPI_URL}
  kafka:
    timeout:
      seconds: ${FASTAPI_KAFKA_TIMEOUT:180} # 타임아웃 180초


# ===== dev 프로필 =====
---
spring:
  config:
    activate:
      on-profile: dev

# dev에서도 실AI 연동 테스트가 가능하도록 mock 비활성 & 적당한 타임아웃
ai:
  mock:
    enabled: false
  timeout:
    seconds: 60

# ===== prod 프로필 =====
---
spring:
  config:
    activate:
      on-profile: prod

ai:
  mock:
    enabled: false
  timeout:
    seconds: 120
