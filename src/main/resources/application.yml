server:
  port: 8080

spring:
  # MySQL 설정 제거, Elasticsearch 설정으로 대체
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
      - org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration
      - org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration
  kafka:
    # .env 파일의 KAFKA_BOOTSTRAP_SERVERS 값을 가져옵니다.
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}

    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

    # consumer를 producer와 같은 레벨로 수정했습니다.
    consumer:
      group-id: backend-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: com.example.finalproject.kafka.dto


  data:
    elasticsearch:
      client:
        reactive:
          endpoints: ${ELASTICSEARCH_ENDPOINTS}
      repositories:
        enabled: true

  security:
    user:
      name: disabled
      password: disabled
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope:
              - email
              - profile
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope:
              - name
              - email
              - profile_image
            client-name: Naver

          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope:
              - profile_nickname
              - account_email
              - profile_image
            client-name: Kakao

        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

jwt:
  secret: ${JWT_SECRET_KEY}
  expiration: ${JWT_SECRET_EXPIRATION}

logging:
  level:
    org.springframework.security: DEBUG
    org.springframework.boot.autoconfigure.security: DEBUG
    org.springframework.data.elasticsearch: DEBUG

dart:
  api:
    key: ${DART_API_KEY}
    how: 위에 key에다가 아래에서 원하는 키 넣으면 됨
    obj: ${DART_API_KEY_OBJ}
    ljh: ${DART_API_KEY_LJH}

frontend:
  url:FRONTEND_URL
