server:
  port: 8080

spring:
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}  # .env에서 덮어쓰기 가능 (기본 dev)
  config:
    import:
      - "aws-secretsmanager:rds/testuser"
      - "aws-secretsmanager:DART/JWT/KAKAO/NAVER/GOOGLE/URL"

  datasource:
    url: jdbc:mariadb://${host}:${port}/${dbname}
    username: ${username}
    password: ${password}
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    database-platform: org.hibernate.dialect.MariaDBDialect

  opensearch:
    uris: ${OPENSEARCH_URI:http://192.168.0.77:9200}
    username: ${OPENSEARCH_USERNAME:admin}
    password: ${OPENSEARCH_PASSWORD:admin}
    connection-timeout: 5s     # connect timeout
    socket-timeout: 60s        # read timeout
    max-conn-total: 100
    max-conn-per-route: 100
    sniff-enabled: false

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: all
      retries: 3
    consumer:
      group-id: ${KAFKA_CONSUMER_GROUP:ai-backend-group}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      auto-offset-reset: earliest
      enable-auto-commit: true

  security:
    user:
      name: disabled
      password: disabled
    oauth2: # Secrets Manager의 키 이름과 플레이스홀더를 일치시킵니다.
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: [ email, profile ]
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope: [ name, email, profile_image ]
            client-name: Naver
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope: [ profile_nickname, account_email, profile_image ]
            client-name: Kakao
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

jwt: # Secrets Manager의 키 이름과 플레이스홀더를 일치시킵니다.
  secret: ${JWT_SECRET_KEY}
  expiration: ${JWT_SECRET_EXPIRATION}
  refresh-expiration: ${JWT_REFRESH_EXPIRATION}

dart:
  api:
    # Secrets Manager의 키 이름과 플레이스홀더를 일치시킵니다.
    obj: ${DART_API_KEY_OBJ}
    ljh: ${DART_API_KEY_LJH}
    base-url: https://opendart.fss.or.kr/api

frontend:
  url: ${FRONTEND_URL}

logging:
  level:
    org.springframework.security: DEBUG
    org.springframework.boot.autoconfigure.security: DEBUG
    org.springframework.data.opensearch: DEBUG
    # org.springframework.data.elasticsearch: DEBUG
    # org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: DEBUG  # (매핑 확인시 켜기)

# ===== AI 시스템 설정 (기본값: 실서버 사용) =====
ai:
  system:
    enabled: ${AI_SYSTEM_ENABLED:true}   # 실제 AI 서버 사용 여부
  mock:
    enabled: ${AI_MOCK_ENABLED:false}    # Mock 사용 여부(기본 false)
  timeout:
    seconds: ${AI_TIMEOUT_SECONDS:60}    # AI 응답 대기 시간(초)

# ===== dev 프로필 =====
---
spring:
  config:
    activate:
      on-profile: dev

# dev에서도 실AI 연동 테스트가 가능하도록 mock 비활성 & 적당한 타임아웃
ai:
  mock:
    enabled: false
  timeout:
    seconds: 60

# ===== prod 프로필 =====
---
spring:
  config:
    activate:
      on-profile: prod

ai:
  mock:
    enabled: false
  timeout:
    seconds: 120
